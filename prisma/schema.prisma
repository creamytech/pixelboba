generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  CLIENT
  ADMIN
  OWNER
}

enum ProjectStatus {
  DISCOVERY
  WIREFRAMING
  DESIGN
  DEVELOPMENT
  TESTING
  LAUNCH
  MAINTENANCE
  COMPLETED
  PAUSED
  CANCELLED
}

enum ContractStatus {
  DRAFT
  SENT
  SIGNED
  EXPIRED
  CANCELLED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum MessageType {
  TEXT
  FILE
  SYSTEM
  PROJECT_UPDATE
}

enum NotificationType {
  MESSAGE
  INVOICE
  CONTRACT
  PROJECT_UPDATE
  PAYMENT_RECEIVED
  SYSTEM
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
  PAST_DUE
  INCOMPLETE
  TRIALING
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  BLOCKED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For manual signups
  role          Role      @default(CLIENT)
  phone         String?
  company       String?
  lastActiveAt  DateTime? // Last time user was active
  isOnline      Boolean   @default(false) // Current online status
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // Portal relations
  projects          Project[]
  messages          Message[]
  contracts         Contract[]
  invoices          Invoice[]
  sentNotifications Notification[] @relation("NotificationSender")
  notifications     Notification[] @relation("NotificationRecipient")
  files             File[]
  signatures        Signature[]
  activities        Activity[]
  createdInvites    Invite[]       @relation("InviteCreator")
  usedInvite        Invite?        @relation("InviteUser")
  passwordResets    PasswordReset[]
  subscription      Subscription?
  assignedTasks     Task[]         @relation("AssignedTasks")
  createdTasks      Task[]         @relation("CreatedTasks")
  comments          Comment[]
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(DISCOVERY)
  progress    Int           @default(0) // 0-100 percentage
  startDate   DateTime
  deadline    DateTime?
  completedAt DateTime?
  websiteUrl  String?       // URL for real-time progress viewing
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  clientId   String
  client     User        @relation(fields: [clientId], references: [id])
  messages   Message[]
  files      File[]
  contracts  Contract[]
  invoices   Invoice[]
  milestones Milestone[]
  activities Activity[]
  tasks      Task[]
}

model Milestone {
  id          String    @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Message {
  id        String      @id @default(cuid())
  content   String @db.Text
  type      MessageType @default(TEXT)
  isRead    Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id])
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])
  fileId    String?
  file      File?    @relation(fields: [fileId], references: [id])
}

model Contract {
  id                  String         @id @default(cuid())
  title               String
  content             String @db.Text
  status              ContractStatus @default(DRAFT)
  sentAt              DateTime?
  signedAt            DateTime?
  expiresAt           DateTime?
  templateId          String?        // Local contract template ID
  docusignTemplateId  String?        // DocuSign template ID
  docusignEnvelopeId  String?        // DocuSign envelope ID
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  // Relations
  clientId   String
  client     User        @relation(fields: [clientId], references: [id])
  projectId  String?
  project    Project?    @relation(fields: [projectId], references: [id])
  signatures Signature[]
  files      File[]
}

model Signature {
  id        String   @id @default(cuid())
  imageData String @db.Text // Base64 encoded signature
  ipAddress String?
  userAgent String?
  signedAt  DateTime @default(now())

  // Relations
  contractId String
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  signerId   String
  signer     User     @relation(fields: [signerId], references: [id])
}

model Invoice {
  id            String        @id @default(cuid())
  number        String        @unique
  title         String
  description   String?
  amount        Decimal @db.Decimal(10, 2)
  taxAmount     Decimal @default(0) @db.Decimal(10, 2)
  totalAmount   Decimal @db.Decimal(10, 2)
  status        InvoiceStatus @default(DRAFT)
  issueDate     DateTime
  dueDate       DateTime
  paidAt        DateTime?
  stripeInvoiceId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  clientId  String
  client    User       @relation(fields: [clientId], references: [id])
  projectId String?
  project   Project?   @relation(fields: [projectId], references: [id])
  items     InvoiceItem[]
}

model InvoiceItem {
  id          String  @id @default(cuid())
  description String
  quantity    Int     @default(1)
  rate        Decimal @db.Decimal(10, 2)
  amount      Decimal @db.Decimal(10, 2)

  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model File {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimetype     String
  size         Int
  url          String
  publicId     String? // For Cloudinary or similar
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  uploaderId String
  uploader   User      @relation(fields: [uploaderId], references: [id])
  projectId  String?
  project    Project?  @relation(fields: [projectId], references: [id])
  contractId String?
  contract   Contract? @relation(fields: [contractId], references: [id])
  taskId     String?
  task       Task?     @relation("TaskAttachments", fields: [taskId], references: [id])
  messages   Message[]
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  senderId    String?
  sender      User?   @relation("NotificationSender", fields: [senderId], references: [id])
  recipientId String
  recipient   User    @relation("NotificationRecipient", fields: [recipientId], references: [id])
}

model Activity {
  id          String   @id @default(cuid())
  action      String   // "created_project", "uploaded_file", "sent_message", etc.
  description String
  metadata    Json? // Additional data about the activity
  createdAt   DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])
}

model ContractTemplate {
  id        String   @id @default(cuid())
  name      String
  content   String @db.Text
  variables Json? // Template variables for dynamic content
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invite {
  id          String    @id @default(cuid())
  email       String
  token       String    @unique
  role        Role      @default(CLIENT)
  expiresAt   DateTime
  usedAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  createdById String
  createdBy   User   @relation("InviteCreator", fields: [createdById], references: [id])
  usedById    String?  @unique
  usedBy      User?    @relation("InviteUser", fields: [usedById], references: [id])

  @@index([email])
  @@index([token])
}

model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([email])
  @@index([token])
}

model AdminSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id                     String             @id @default(cuid())
  stripeCustomerId       String             @unique
  stripeSubscriptionId   String             @unique
  stripePriceId          String
  status                 SubscriptionStatus @default(INCOMPLETE)
  currentPeriodStart     DateTime
  currentPeriodEnd       DateTime
  cancelAtPeriodEnd      Boolean            @default(false)
  canceledAt             DateTime?
  pausedAt               DateTime?
  trialStart             DateTime?
  trialEnd               DateTime?
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt

  // Relations
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
}

model Task {
  id             String     @id @default(cuid())
  title          String
  description    String?    @db.Text
  status         TaskStatus @default(TODO)
  priority       Priority   @default(MEDIUM)
  order          Int        @default(0)  // For drag-and-drop positioning within status
  dueDate        DateTime?
  completedAt    DateTime?
  estimatedHours Float?
  actualHours    Float?
  tags           String[]   // Array of tags for categorization
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  projectId    String
  project      Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignedToId String?
  assignedTo   User?     @relation("AssignedTasks", fields: [assignedToId], references: [id])
  createdById  String
  createdBy    User      @relation("CreatedTasks", fields: [createdById], references: [id])
  comments     Comment[]
  attachments  File[]    @relation("TaskAttachments")

  @@index([projectId])
  @@index([status])
  @@index([assignedToId])
  @@index([priority])
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  taskId   String
  task     Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  @@index([taskId])
}

enum RecurrencePattern {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

model TaskTemplate {
  id             String   @id @default(cuid())
  name           String
  description    String?  @db.Text
  priority       Priority @default(MEDIUM)
  estimatedHours Float?
  tags           String[]
  checklist      Json?    // Array of checklist items
  isPublic       Boolean  @default(false) // Available to all projects
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  createdById String
  projectId   String? // If null, template is global
}

model BoardTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  tasks       Json     // Array of template tasks
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdById String
}

model RecurringTask {
  id               String            @id @default(cuid())
  title            String
  description      String?           @db.Text
  priority         Priority          @default(MEDIUM)
  pattern          RecurrencePattern
  interval         Int               @default(1) // Every N days/weeks/months
  startDate        DateTime
  endDate          DateTime?
  lastCreated      DateTime?
  nextDue          DateTime
  isActive         Boolean           @default(true)
  estimatedHours   Float?
  tags             String[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relations
  projectId    String
  assignedToId String?
  createdById  String
}

model AutoAssignmentRule {
  id          String   @id @default(cuid())
  name        String
  description String?
  conditions  Json     // Conditions to match (priority, tags, etc.)
  assignToId  String   // User to assign to
  isActive    Boolean  @default(true)
  priority    Int      @default(0) // Higher priority rules checked first
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projectId String
}

model TaskReminder {
  id         String    @id @default(cuid())
  taskId     String
  userId     String
  remindAt   DateTime
  isSent     Boolean   @default(false)
  sentAt     DateTime?
  message    String?
  type       String    @default("DUE_DATE") // DUE_DATE, CUSTOM
  createdAt  DateTime  @default(now())

  @@index([remindAt, isSent])
  @@index([taskId])
  @@index([userId])
}

