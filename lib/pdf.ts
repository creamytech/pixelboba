import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

interface ProjectReportData {
  projectName: string;
  clientName: string;
  status: string;
  progress: number;
  startDate: string;
  tasks: Array<{
    title: string;
    status: string;
    priority: string;
    assignedTo: string | null;
  }>;
  timeEntries?: Array<{
    description: string;
    duration: number;
    date: string;
  }>;
  milestones?: Array<{
    title: string;
    dueDate: string;
    status: string;
  }>;
}

export function generateProjectReport(data: ProjectReportData): jsPDF {
  const doc = new jsPDF();
  let yPosition = 20;

  // Title
  doc.setFontSize(24);
  doc.setFont('helvetica', 'bold');
  doc.text('Project Report', 105, yPosition, { align: 'center' });
  yPosition += 15;

  // Project Info
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.text(`Project: ${data.projectName}`, 20, yPosition);
  yPosition += 8;
  doc.text(`Client: ${data.clientName}`, 20, yPosition);
  yPosition += 8;
  doc.text(`Status: ${data.status}`, 20, yPosition);
  yPosition += 8;
  doc.text(`Progress: ${data.progress}%`, 20, yPosition);
  yPosition += 8;
  doc.text(`Start Date: ${data.startDate}`, 20, yPosition);
  yPosition += 15;

  // Tasks Table
  if (data.tasks && data.tasks.length > 0) {
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('Tasks', 20, yPosition);
    yPosition += 10;

    autoTable(doc, {
      startY: yPosition,
      head: [['Task', 'Status', 'Priority', 'Assigned To']],
      body: data.tasks.map((task) => [
        task.title,
        task.status,
        task.priority,
        task.assignedTo || 'Unassigned',
      ]),
      theme: 'grid',
      headStyles: { fillColor: [124, 58, 237], textColor: 255 },
      styles: { fontSize: 10 },
    });

    yPosition = (doc as any).lastAutoTable.finalY + 15;
  }

  // Time Entries
  if (data.timeEntries && data.timeEntries.length > 0) {
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('Time Tracking', 20, yPosition);
    yPosition += 10;

    const totalHours = data.timeEntries.reduce((sum, entry) => sum + entry.duration, 0) / 60;

    autoTable(doc, {
      startY: yPosition,
      head: [['Description', 'Duration (hrs)', 'Date']],
      body: data.timeEntries.map((entry) => [
        entry.description,
        (entry.duration / 60).toFixed(2),
        entry.date,
      ]),
      foot: [['Total Hours:', totalHours.toFixed(2), '']],
      theme: 'grid',
      headStyles: { fillColor: [124, 58, 237], textColor: 255 },
      footStyles: { fillColor: [230, 230, 230], fontStyle: 'bold' },
      styles: { fontSize: 10 },
    });

    yPosition = (doc as any).lastAutoTable.finalY + 15;
  }

  // Milestones
  if (data.milestones && data.milestones.length > 0) {
    if (yPosition > 250) {
      doc.addPage();
      yPosition = 20;
    }

    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('Milestones', 20, yPosition);
    yPosition += 10;

    autoTable(doc, {
      startY: yPosition,
      head: [['Milestone', 'Due Date', 'Status']],
      body: data.milestones.map((milestone) => [
        milestone.title,
        milestone.dueDate,
        milestone.status,
      ]),
      theme: 'grid',
      headStyles: { fillColor: [124, 58, 237], textColor: 255 },
      styles: { fontSize: 10 },
    });
  }

  // Footer
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text(`Generated by Pixel Boba - Page ${i} of ${pageCount}`, 105, 285, { align: 'center' });
  }

  return doc;
}

export function generateInvoiceReport(invoiceData: {
  invoiceNumber: string;
  clientName: string;
  date: string;
  dueDate: string;
  items: Array<{
    description: string;
    quantity: number;
    rate: number;
    amount: number;
  }>;
  subtotal: number;
  tax: number;
  total: number;
}): jsPDF {
  const doc = new jsPDF();

  // Title
  doc.setFontSize(28);
  doc.setFont('helvetica', 'bold');
  doc.text('INVOICE', 105, 30, { align: 'center' });

  // Invoice Details
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.text(`Invoice #: ${invoiceData.invoiceNumber}`, 20, 50);
  doc.text(`Date: ${invoiceData.date}`, 20, 58);
  doc.text(`Due Date: ${invoiceData.dueDate}`, 20, 66);

  // Client Info
  doc.text(`Bill To:`, 20, 80);
  doc.setFont('helvetica', 'bold');
  doc.text(invoiceData.clientName, 20, 88);

  // Items Table
  autoTable(doc, {
    startY: 105,
    head: [['Description', 'Quantity', 'Rate', 'Amount']],
    body: invoiceData.items.map((item) => [
      item.description,
      item.quantity,
      `$${item.rate.toFixed(2)}`,
      `$${item.amount.toFixed(2)}`,
    ]),
    foot: [
      ['', '', 'Subtotal:', `$${invoiceData.subtotal.toFixed(2)}`],
      ['', '', 'Tax:', `$${invoiceData.tax.toFixed(2)}`],
      ['', '', 'Total:', `$${invoiceData.total.toFixed(2)}`],
    ],
    theme: 'striped',
    headStyles: { fillColor: [124, 58, 237], textColor: 255 },
    footStyles: { fillColor: [230, 230, 230], fontStyle: 'bold' },
  });

  return doc;
}
